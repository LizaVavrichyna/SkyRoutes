// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkyRoutes.Data;

#nullable disable

namespace SkyRoutes.Migrations
{
    [DbContext(typeof(SkyRoutesDbContext))]
    [Migration("20231024192504_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "58eeb428-a7c2-4919-adf7-5aecc885932d",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "686c585a-525e-4938-a8a4-0669f463a7d7",
                            Name = "Technician",
                            NormalizedName = "technician"
                        },
                        new
                        {
                            Id = "205f69b3-c8dc-4e19-a813-ed3608226ced",
                            Name = "Expeditor",
                            NormalizedName = "expeditor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89e64aea-3ab1-448a-87ad-e22f691d3cc1",
                            Email = "admina@skyroutes.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAZ1xYXjCurvpCK+TDJClxRpIQ45/xUowHqlwb4Xe98ZEWaF/P189e8skOIhizlS0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c88d77c-9b86-4ab6-9880-a9cd6358fd74",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "t8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "107c13a2-fab1-4342-a601-5eeeff36bf7b",
                            Email = "john@skyroutes.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGf+oZNWtdJ/ms/ZqSMfxkJtXbKRIBPUmhL7l8aTT7N6CuNbYPsD3Dn9zC3W1yqq1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1e1f147-37e1-4656-af2a-fc765f6b46ff",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe"
                        },
                        new
                        {
                            Id = "t7d21fac-3b21-454a-a747-075f072d0cf3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33ef9196-f65a-4f5c-8a5c-7a5afaf8e9cb",
                            Email = "jane@skyroutes.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOspPdc4FWXt6lbln+h0czoVeuzC+GcxJd3PCLToFv5kGV4DG5VorUQtymYVVQOqhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7dcb28ff-6d0f-4849-8530-45719c379c9f",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith"
                        },
                        new
                        {
                            Id = "t806cfae-bda9-47c5-8473-dd52fd056a9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ddcf358-e7cf-40d5-963b-740d60425ab1",
                            Email = "alice@skyroutes.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM6F+OatT1F2s4casUlQioJRUdCuEbMRyPzNUP3Ka/2uBYPuMvnujzd+bs6MTJLxIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "285cf006-427f-4680-8d03-5a958cc2dfef",
                            TwoFactorEnabled = false,
                            UserName = "AliceJohnson"
                        },
                        new
                        {
                            Id = "ece89d88-75da-4a80-9b0d-3fe58582b8e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f30109a-4a5f-4d06-a005-718cb10c5135",
                            Email = "bob@skyroutes.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBCL1V3vIRb4T8KKRUbayRuczq5gJHotUDMyD7q3Lm53yaDlYzz3Y2bLJaitlwGISw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24e2fd82-353c-4869-9d3d-a118120cfcb3",
                            TwoFactorEnabled = false,
                            UserName = "BobWilliams"
                        },
                        new
                        {
                            Id = "e224a03d-bf0c-4a05-b728-e3521e45d74d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b45e20a-0450-4a8a-85f6-bf63a28589c1",
                            Email = "Eve@skyroutes.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKaKDVY+xVlHgbxYp8acDa8fnApFxKDn7V5alx30By5xM9XG2vzpE4WaFrBjkGelQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "661dc833-05de-4fef-81df-6328f285dacb",
                            TwoFactorEnabled = false,
                            UserName = "EveDavis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "abc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "58eeb428-a7c2-4919-adf7-5aecc885932d"
                        },
                        new
                        {
                            UserId = "t8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            RoleId = "686c585a-525e-4938-a8a4-0669f463a7d7"
                        },
                        new
                        {
                            UserId = "t7d21fac-3b21-454a-a747-075f072d0cf3",
                            RoleId = "686c585a-525e-4938-a8a4-0669f463a7d7"
                        },
                        new
                        {
                            UserId = "t806cfae-bda9-47c5-8473-dd52fd056a9b",
                            RoleId = "686c585a-525e-4938-a8a4-0669f463a7d7"
                        },
                        new
                        {
                            UserId = "ece89d88-75da-4a80-9b0d-3fe58582b8e2",
                            RoleId = "205f69b3-c8dc-4e19-a813-ed3608226ced"
                        },
                        new
                        {
                            UserId = "e224a03d-bf0c-4a05-b728-e3521e45d74d",
                            RoleId = "205f69b3-c8dc-4e19-a813-ed3608226ced"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkyRoutes.Models.Drone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DistanceCap")
                        .HasColumnType("integer");

                    b.Property<string>("ImageLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("InFleetSince")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("InHangar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Drones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Callsign = "PX1",
                            DistanceCap = 5000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2021, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Phantom X1"
                        },
                        new
                        {
                            Id = 2,
                            Callsign = "MA2",
                            DistanceCap = 8000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Mavic Air 2"
                        },
                        new
                        {
                            Id = 3,
                            Callsign = "I2",
                            DistanceCap = 10000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2019, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Inspire 2"
                        },
                        new
                        {
                            Id = 4,
                            Callsign = "PA",
                            DistanceCap = 2000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2020, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Parrot Anafi"
                        },
                        new
                        {
                            Id = 5,
                            Callsign = "EVO+",
                            DistanceCap = 15000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2018, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Autel EVO Lite+"
                        },
                        new
                        {
                            Id = 6,
                            Callsign = "Mini2",
                            DistanceCap = 3000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2020, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "DJI Mini 2"
                        },
                        new
                        {
                            Id = 7,
                            Callsign = "Typhoon",
                            DistanceCap = 12000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2019, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Yuneec Typhoon H Pro"
                        },
                        new
                        {
                            Id = 8,
                            Callsign = "S2",
                            DistanceCap = 5000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Skydio 2"
                        },
                        new
                        {
                            Id = 9,
                            Callsign = "Nano",
                            DistanceCap = 1000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "Autel EVO Nano"
                        },
                        new
                        {
                            Id = 10,
                            Callsign = "Alta6",
                            DistanceCap = 18000,
                            ImageLocation = "https://www.bhphotovideo.com/cdn-cgi/image/format=auto,fit=scale-down,width=500,quality=95/https://www.bhphotovideo.com/images/images500x500/sony_airpeak_drone_1623324938_1617585.jpg",
                            InFleetSince = new DateTime(2019, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InHangar = true,
                            IsActive = true,
                            Model = "FreeFly Alta 6"
                        });
                });

            modelBuilder.Entity("SkyRoutes.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Delivered")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsHub")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int?>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 123,
                            Address = "50 Airways Blvd, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 10, 26, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9620),
                            IsHub = true,
                            Latitude = 36.130043100000002,
                            Longitude = -86.691946099999996,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 10, 26, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9720),
                            Latitude = 36.162700000000001,
                            Longitude = -86.781599999999997,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 10, 26, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9720),
                            Latitude = 36.156300000000002,
                            Longitude = -86.781599999999997,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 10, 26, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9740),
                            Latitude = 36.154200000000003,
                            Longitude = -86.784499999999994,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "1055 Pine St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 23, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9740),
                            Latitude = 36.152452199999999,
                            Longitude = -86.782558899999998,
                            RouteId = 2
                        },
                        new
                        {
                            Id = 5,
                            Address = "610 Birch Glen Ct, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 23, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9750),
                            Latitude = 36.071896600000002,
                            Longitude = -86.969204200000007,
                            RouteId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "400 Maple St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 23, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9750),
                            Latitude = 36.261515600000003,
                            Longitude = -86.705105099999997,
                            RouteId = 2
                        },
                        new
                        {
                            Id = 7,
                            Address = "548 Cedar St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9760),
                            Latitude = 36.044502899999998,
                            Longitude = -86.706540399999994
                        },
                        new
                        {
                            Id = 8,
                            Address = "827 Redwood St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9760),
                            Latitude = 36.056384899999998,
                            Longitude = -86.7801446
                        },
                        new
                        {
                            Id = 9,
                            Address = "615 Spruce St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9770),
                            Latitude = 36.159659400000002,
                            Longitude = -86.80638239999999
                        },
                        new
                        {
                            Id = 10,
                            Address = "2929 Willow St, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9790),
                            Latitude = 36.154700099999999,
                            Longitude = -86.753109100000003
                        },
                        new
                        {
                            Id = 11,
                            Address = "3232 Sycamore Ln, Nashville, TN",
                            Delivered = false,
                            DeliveryDate = new DateTime(2023, 11, 1, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9790),
                            Latitude = 36.112917699999997,
                            Longitude = -86.829324700000001
                        },
                        new
                        {
                            Id = 12,
                            Address = "3535 Juniper St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 22, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9790),
                            Latitude = 36.1616,
                            Longitude = -86.781000000000006,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 13,
                            Address = "3838 Cedar Elm St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 22, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9800),
                            Latitude = 36.1678,
                            Longitude = -86.770399999999995,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 14,
                            Address = "4141 Red Oak St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 22, 14, 25, 4, 442, DateTimeKind.Local).AddTicks(9800),
                            Latitude = 36.159700000000001,
                            Longitude = -86.784099999999995,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 15,
                            Address = "4444 Dogwood St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 22, 14, 25, 4, 443, DateTimeKind.Local).AddTicks(320),
                            Latitude = 36.163400000000003,
                            Longitude = -86.777500000000003,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 16,
                            Address = "4747 Chestnut St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 22, 14, 25, 4, 443, DateTimeKind.Local).AddTicks(330),
                            Latitude = 36.156799999999997,
                            Longitude = -86.775300000000001,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 17,
                            Address = "5050 Willow Oak St, Nashville, TN",
                            Delivered = true,
                            DeliveryDate = new DateTime(2023, 10, 22, 14, 25, 4, 443, DateTimeKind.Local).AddTicks(330),
                            Latitude = 36.167099999999998,
                            Longitude = -86.781199999999998,
                            RouteId = 3
                        });
                });

            modelBuilder.Entity("SkyRoutes.Models.RepairType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("RepairTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Propeller Replacement"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Battery Connector Repair"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gimbal Stabilization"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Motor Replacement"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GPS Module Troubleshooting"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Camera Sensor Cleaning"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ESC Calibration"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Controller Calibration"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Frame Repair or Replacement"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Firmware Updates"
                        });
                });

            modelBuilder.Entity("SkyRoutes.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveredOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DroneId")
                        .HasColumnType("integer");

                    b.Property<int>("ExpeditorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DroneId");

                    b.HasIndex("ExpeditorId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveredOn = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DroneId = 1,
                            ExpeditorId = 6
                        },
                        new
                        {
                            Id = 2,
                            DeliveredOn = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DroneId = 2,
                            ExpeditorId = 5
                        },
                        new
                        {
                            Id = 3,
                            DeliveredOn = new DateTime(2023, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DroneId = 3,
                            ExpeditorId = 6
                        });
                });

            modelBuilder.Entity("SkyRoutes.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DroneId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InRepairSince")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Open")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OutOfRepair")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RepairSummary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RepairTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SubmittedById")
                        .HasColumnType("integer");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DroneId");

                    b.HasIndex("RepairTypeId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DroneId = 1,
                            InRepairSince = new DateTime(2023, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Open = false,
                            OutOfRepair = new DateTime(2023, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RepairSummary = "Simple propeller blade repl",
                            RepairTypeId = 1,
                            SubmittedById = 6,
                            TechnicianId = 4
                        });
                });

            modelBuilder.Entity("SkyRoutes.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDateTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admin",
                            IdentityUserId = "abc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            IsActive = true,
                            LastName = "Maverick"
                        },
                        new
                        {
                            Id = 2,
                            CreateDateTime = new DateTime(2023, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            IdentityUserId = "t8d76512-74f1-43bb-b1fd-87d3a8aa36df",
                            IsActive = true,
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDateTime = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            IdentityUserId = "t7d21fac-3b21-454a-a747-075f072d0cf3",
                            IsActive = true,
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 4,
                            CreateDateTime = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alice",
                            IdentityUserId = "t806cfae-bda9-47c5-8473-dd52fd056a9b",
                            IsActive = true,
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = 5,
                            CreateDateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bob",
                            IdentityUserId = "ece89d88-75da-4a80-9b0d-3fe58582b8e2",
                            IsActive = true,
                            LastName = "Williams"
                        },
                        new
                        {
                            Id = 6,
                            CreateDateTime = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eve",
                            IdentityUserId = "e224a03d-bf0c-4a05-b728-e3521e45d74d",
                            IsActive = true,
                            LastName = "Davis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkyRoutes.Models.Order", b =>
                {
                    b.HasOne("SkyRoutes.Models.Route", "Route")
                        .WithMany("Orders")
                        .HasForeignKey("RouteId");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SkyRoutes.Models.Route", b =>
                {
                    b.HasOne("SkyRoutes.Models.Drone", "Drone")
                        .WithMany()
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkyRoutes.Models.UserProfile", "Expeditor")
                        .WithMany()
                        .HasForeignKey("ExpeditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drone");

                    b.Navigation("Expeditor");
                });

            modelBuilder.Entity("SkyRoutes.Models.Ticket", b =>
                {
                    b.HasOne("SkyRoutes.Models.Drone", "Drone")
                        .WithMany()
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkyRoutes.Models.RepairType", "RepairType")
                        .WithMany()
                        .HasForeignKey("RepairTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkyRoutes.Models.UserProfile", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.Navigation("Drone");

                    b.Navigation("RepairType");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("SkyRoutes.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("SkyRoutes.Models.Route", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
